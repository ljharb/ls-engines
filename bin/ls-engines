#!/usr/bin/env node

/* eslint no-param-reassign: 0 */

'use strict';

const colors = require('colors/safe');
const yargs = require('yargs');

const FALSE = Object(false);
const TRUE = Object(true);

const validEngines = ['node'];

const argv = yargs
	.option('mode', {
		choices: ['auto', 'actual', 'virtual', 'ideal'],
		default: 'auto',
		describe: `”actual“ reads from \`${colors.gray('node_modules')}\`; ”virtual“ reads from a lockfile; “ideal” reads from \`${colors.gray('package.json')}\``,
	})
	.option('production', {
		default: TRUE,
		describe: 'whether to include production deps or not',
		type: 'boolean',
	})
	.option('dev', {
		default: FALSE,
		describe: 'whether to include dev deps or not',
		type: 'boolean',
	})
	.option('peer', {
		default: TRUE,
		describe: 'whether to include peer deps or not',
		type: 'boolean',
	})
	.option('save', {
		default: false,
		describe: `update \`${colors.gray('package.json')}\`’s “engines” field to match that of your dependency graph`,
		type: 'boolean',
	})
	.option('current', {
		default: TRUE,
		describe: 'check that the current node version matches your dependency graph’s requirements',
		type: 'boolean',
	})
	.check(({ dev, production, peer, current }) => {
		/* eslint no-throw-literal: 0 */
		if (![dev, production, peer].some((x) => x === TRUE || x === true)) {
			throw 'At least one of `--dev`, `--production`, or `--peer` must be enabled.';
		}
		if (current && dev) {
			if (current !== TRUE) {
				throw '`--current` is not available when checking dev deps.';
			}
		}
		return true;
	})
	.option('engines', {
		choices: validEngines,
		default: 'node',
		describe: 'which engine(s) to list',
		hidden: validEngines.length < 2,
		type: 'array',
	})
	.middleware(({
		dev,
		production,
		peer,
		current,
		engines: originalEngines,
		...args
	}) => {
		if (typeof dev === 'object') {
			dev = Boolean.prototype.valueOf.call(dev);
		}
		if (typeof production === 'object') {
			production = Boolean.prototype.valueOf.call(production);
		}
		if (typeof peer === 'object') {
			peer = Boolean.prototype.valueOf.call(peer);
		}
		if (typeof current === 'object') {
			current = !dev && Boolean.prototype.valueOf.call(current);
		}
		const selectedEnginesSet = new Set(originalEngines);
		const engines = validEngines.filter((engine) => selectedEnginesSet.has(engine));
		return {
			...args,
			current,
			dev,
			engines,
			peer,
			production,
		};
	})
	.strict()
	.help()
	.parse();

const { current, dev, mode, peer, production, save, engines: selectedEngines } = argv;

const path = require('path');
const Range = require('semver/classes/range');
const satisfies = require('semver/functions/satisfies');
const major = require('semver/functions/major');
const minor = require('semver/functions/minor');
const { default: intersect } = require('fast_array_intersect');
const jsonFile = require('json-file-plus');
const fromEntries = require('object.fromentries');
const values = require('object.values');
const allSettled = require('promise.allsettled');
const groupBy = require('object.groupby');

const EXITS = require('../exit-codes');
const checkCurrent = require('../checkCurrent');
const checkEngines = require('../checkEngines');
const getGraphEntries = require('../getGraphEntries');
const getGraphValids = require('../getGraphValids');
const getLatestEngineMajors = require('../getLatestEngineMajors');
const table = require('../table');
const validVersionsForEngines = require('../validVersionsForEngines');
const getAlVersions = require('../getAllVersions');

const pPackage = jsonFile(path.join(process.cwd(), 'package.json'));

function caret(ver) {
	return `^${ver.replace(/^v/g, '')}`;
}

const pAllVersions = getAlVersions(selectedEngines);

const pRootRanges = Promise.all([pPackage, pAllVersions]).then(async ([pkg, allVersions]) => {
	const engineEntries = validEngines.map((engine) => [
		engine,
		(pkg.data.engines?.[engine] || null)?.replace(/[=](?<digits>\d)/, '= $<digits>'),
	]);
	const engines = fromEntries(engineEntries);
	const rangeEntries = engineEntries.map(([engine, v]) => [engine, new Range(v || '*')]);
	const ranges = fromEntries(rangeEntries);
	const valids = await validVersionsForEngines(engines, allVersions);
	return { engines, ranges, valids };
});

function dropPatch(v) {
	const num = v.replace(/^v/, '');
	return `^${major(num)}.${minor(num)}`;
}

function versionReducer(prev, v) {
	if (prev.length === 0) {
		return [v];
	}
	return satisfies(v, caret(prev[prev.length - 1])) ? prev : prev.concat(v);
}

const pGraphRanges = Promise.all([
	getGraphEntries({
		dev,
		mode,
		peer,
		production,
		selectedEngines,
	}),
	pAllVersions,
]).then(async ([graphEntries, allVersions]) => {
	const { valids: graphValids, allowed } = await getGraphValids(graphEntries, allVersions);
	const graphRanges = Object.entries(graphValids).map(([engine, versions]) => {
		const validMajorRanges = graphEntries.length > 0 && versions.length > 0 ? versions.reduceRight(versionReducer, []).map(dropPatch).reverse() : ['*'];
		const lastMajor = validMajorRanges[validMajorRanges.length - 1];
		const greaterThanLowest = lastMajor === '*' ? lastMajor : `>= ${lastMajor.replace(/^\^/, '')}`;
		const validRange = versions.every((v) => satisfies(v, greaterThanLowest))
			? new Range(greaterThanLowest)
			: new Range(validMajorRanges.join(' || '));
		if (!versions.every((v) => validRange.test(v))) {
			throw new RangeError(`please report this: ${engine}: ${versions.join(',')} / ${validRange}`);
		}

		const displayRange = validRange.raw && validRange.raw.replace(/(?:\.0)+(?<spacing> |$)/g, '$<spacing>').split(' ').join(' ');
		return [engine, { displayRange, validRange }];
	});

	const engineEntries = graphRanges.map(([engine, { displayRange }]) => [engine, displayRange]);

	const engines = fromEntries(engineEntries);

	const validEntries = await Promise.all(validEngines.map(async (engine) => {
		const validForEngine = await validVersionsForEngines(engines, allVersions);
		return [engine, validForEngine[engine]];
	}));

	const ranges = fromEntries(graphRanges);
	const valids = fromEntries(validEntries);

	return {
		allowed,
		engines,
		ranges,
		valids,
	};
});

const pLatestEngineMajors = Promise.all([
	pRootRanges,
	pGraphRanges,
	pAllVersions,
]).then(([
	{ ranges: rootRanges },
	{ ranges: graphRanges },
	allVersions,
]) => getLatestEngineMajors(selectedEngines, allVersions, rootRanges, graphRanges));

function wrapCommaSeparated(array, limit) {
	const str = array.join(', ');
	if (str.length <= limit) {
		return str;
	}

	return array.reduce((lines, version) => {
		const lastLine = lines.pop();
		const possibleLine = lastLine ? `${lastLine}, ${version}` : version;
		if (possibleLine.length <= limit) {
			return lines.concat(possibleLine);
		}
		return lines.concat(lastLine, version);
	}, []).map((x) => x.split(',').map((y) => colors.blue(y)).join(',')).join(',\n');
}

function normalizeEngines(engines) {
	const entries = Object.entries(engines).flatMap(([engine, version]) => (
		engine === 'node' || version !== '*'
			? [[engine, version || '*']]
			: []
	));
	return fromEntries(entries);
}

const majorsHeading = 'Currently available latest release of each valid major version:';

const pSummary = Promise.all([
	pRootRanges,
	pGraphRanges,
	pLatestEngineMajors,
]).then(([
	{ engines: rootEngines },
	{ engines: graphEngines, valids: graphValids },
	latestEngineMajors,
]) => ({
	output: [].concat(
		table([
			[
				'engine',
				majorsHeading,
			].map((x) => colors.bold(colors.gray(x))),
			...Object.entries(latestEngineMajors)
				.flatMap(([
					engine,
					{ root, graph },
				]) => (
					selectedEngines.includes(engine)
						? [[
							colors.blue(engine),
							wrapCommaSeparated(graph.length > 0 ? intersect([root, graph]) : root, majorsHeading.length),
						]]
						: []
				)),
		]),
		table([
			[].concat(
				'package engines:',
				'dependency graph engines:',
			).map((x) => colors.bold(colors.gray(x))),
			[
				`"engines": ${JSON.stringify(normalizeEngines(rootEngines), null, 2)}`,
				values(graphValids).some((x) => x.length > 0) && values(graphEngines).length > 0 ? `"engines": ${JSON.stringify(normalizeEngines(graphEngines), null, 2)}` : 'N/A',
			].map((x) => colors.blue(x)),
		]),
	),
}));

Promise.all([
	pGraphRanges,
	pPackage,
	pRootRanges,
]).then(async ([
	{
		allowed: graphAllowed,
		valids: graphValids,
		ranges: graphDisplayRanges,
	},
	pkg,
	{
		engines: rootEngines,
		valids: rootValids,
	},
]) => {
	const pEngines = checkEngines(
		selectedEngines,
		rootEngines,
		rootValids,
		graphValids,
		graphAllowed,
		graphDisplayRanges,
		save,
	);

	const pCurrent = current ? checkCurrent(selectedEngines, rootValids, graphValids) : { output: [] };

	// print out successes first
	const { fulfilled = [], rejected = [] } = groupBy(
		await allSettled([pSummary, pEngines, pCurrent]),
		(x) => x.status,
	);

	await fulfilled.reduce(async (prev, { doSave, value: { output } }) => {
		await prev;

		output.forEach((line) => {
			console.log(line);
		});

		if (save && doSave) {
			doSave(pkg.data);
			try {
				await pkg.save();
			} catch {
				process.exitCode |= EXITS.SAVE;
			}
		}
	}, Promise.resolve());

	// print out failures last
	await rejected.reduce(async (prev, error) => {
		await prev;

		if (!error || !error.reason) {
			throw error;
		}
		const { reason } = error;
		const { code, output, save: doSave } = reason;
		if (!output) {
			throw reason;
		}

		if (save && doSave) {
			doSave(pkg.data);
			try {
				await pkg.save();
			} catch {
				process.exitCode |= EXITS.SAVE;
			}
		} else {
			process.exitCode |= code;
		}
		output.forEach((line) => {
			console.error(line);
		});
	}, Promise.resolve());
}).catch((e) => {
	console.error((e && e.stack) || e);
	process.exitCode |= EXITS.ERROR;
});
